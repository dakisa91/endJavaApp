/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package endjavaapp;

import java.sql.Array;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author jordashiro
 */
public class NewJFrame extends javax.swing.JFrame {
        String username = "root";
        String password = "";
        String dbLocal = "localhost";
        String dbName = "hwUsers";

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
    //    initDbCon(); //may enable later
        initComponents();
        //fill table contents
        initTableContent();
        addListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new endjavaapp.Placeholder("Username");
        jPasswordField1 = new PasswordPlaceholder("Password");
        jPasswordField2 = new PasswordPlaceholder("Repeat Password");
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setToolTipText("");
        jPanel1.setInheritsPopupMenu(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jProgressBar1.setBackground(new java.awt.Color(51, 51, 255));
        jProgressBar1.setForeground(new java.awt.Color(0, 0, 255));
        jProgressBar1.setToolTipText("");
        jProgressBar1.setString("Password Strength");
        jProgressBar1.setStringPainted(true);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Full Name", "Address", "Company"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoscrolls(false);
        jTable2.setEditingColumn(1);
        jTable2.setEditingRow(1);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getColumn(0).setResizable(false);
        jTable2.getColumnModel().getColumn(0).setHeaderValue("ID");
        jTable2.getColumnModel().getColumn(1).setResizable(false);
        jTable2.getColumnModel().getColumn(1).setHeaderValue("Full Name");
        jTable2.getColumnModel().getColumn(2).setResizable(false);
        jTable2.getColumnModel().getColumn(2).setHeaderValue("Address");
        jTable2.getColumnModel().getColumn(3).setResizable(false);
        jTable2.getColumnModel().getColumn(3).setHeaderValue("Company");

        jButton1.setText("Register");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                updateStrength(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton2.setText("Save Selected User to File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Transactions");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jPasswordField2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jProgressBar1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            checkInputAndDoRegistration();
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateStrength(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateStrength
        boolean letterCheck = false;
        boolean numberCheck = false;
        boolean specialCharCheck = false;
        
        char[] password = jPasswordField1.getPassword();
        for(int i = 0; i < password.length; i++)
        {
        //TODO: find a way to check if char is symbol
        //    char[] specialChars = {'!','@','#','$','%','^','&','*','(',')','_','+','=','-','?',
        //                            '<','>',':',';',']','[','{','}','/','.'};
            letterCheck = letterCheck || Character.isLetter(password[i]);
            numberCheck = numberCheck || Character.isDigit(password[i]);
        //    System.out.println(Character.getType(password[i]) == Character.);
        }
        int tempVal = 0;
        if(letterCheck)
            tempVal+=15;
        if(numberCheck)
            tempVal+=15;
        tempVal = tempVal + password.length * 5;
        
        jProgressBar1.setValue(tempVal);
    }//GEN-LAST:event_updateStrength

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int row = jTable1.getSelectedRow();
        System.out.println("The row selected for deletetion row");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void checkInputAndDoRegistration() throws SQLException {
        String username = jTextField1.getText();
        char[] password = jPasswordField1.getPassword();
        char[] repeatPassword = jPasswordField2.getPassword();
        
        if(username.length() == 0 || password.length == 0 || repeatPassword.length == 0)
        {
            alert("Please fill out all fields.");
        }
        else
        {
            if(comparePasswords(password,repeatPassword))
            {
                //do db insert
                doRegisterQuery();
                //add information to table
                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                //clear inputs
                clearFields();
                //reload talbe
                initTableContent();
            }
            else
            {
                alert("Passwords don't match!");
            }
        }
    }

    private void alert(String theMessage) {
        JPanel messagePanel = new JPanel();
        JOptionPane.showMessageDialog(messagePanel, theMessage);
    }

    private boolean comparePasswords(char[] password, char[] repeatPassword) {
        System.out.println("cheking password length");
        if(password.length == repeatPassword.length)
        {
            System.out.println("length OK");
            boolean complexCheck = true;
            System.out.println("running complex check");
            for(int i = 0; i < password.length; i++)
            {
                complexCheck = complexCheck && (password[i] == repeatPassword[i]);
                if(!complexCheck){
                    return false;
                }
                /*uncomet for check status
                System.out.println("On step " + i + " check is:" + complexCheck);
                */
            }
            if(complexCheck)
            {
                return true;
            }
        }
        return false; //different lenght => diff passwords
    }

    private Connection initDbCon() throws SQLException {
        try{
            Class.forName("com.mysql.jdbc.Driver");
        }catch(ClassNotFoundException e){
            e.printStackTrace();
        }
        
        String host = "jdbc:mysql://" + dbLocal + "/" + dbName;
        
        Connection con = DriverManager.getConnection(host, username, password);
        return con;
        
    }

    private void doRegisterQuery() throws SQLException {
        Connection con = initDbCon();
        Statement stmt = null;
        char[] pwd = jPasswordField1.getPassword();
        String tempPwdString = new String(pwd);
        String query = "INSERT INTO `user` (`username`, `password`) " +
                                    "VALUES ('" + jTextField1.getText() + "', '" + tempPwdString + "');";
        Statement st = (Statement) con.createStatement();
        st.executeUpdate(query);
    }

    private void clearFields() {
        jTextField1.setText("");
        jPasswordField1.setText("");
        jPasswordField2.setText("");
        jProgressBar1.setValue(0);
    }

    private void initTableContent() {
        try {
            Connection con = initDbCon();
            String query = "SELECT * FROM `user`";
            Statement st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(query);
            String[] colNames = new String[]{
                "ID","username", "password"
            };
            DefaultTableModel tableModel = new DefaultTableModel(colNames,0);
            while(rs.next())
            {
                tableModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3)});
            }
            jTable1.setModel(tableModel);
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addListeners()
    { // inline edit
        jTable1.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                System.out.println("Changes in table detected");
                int row = e.getFirstRow();
                int col = e.getColumn();
                String colName = jTable1.getColumnName(col);
                    
                try {
                    Connection con = initDbCon();
                    String query = "UPDATE `user` SET `" + colName + "`='" + jTable1.getValueAt(row, col) + "' "
                            + "WHERE id=" + jTable1.getValueAt(row, 0);
                    Statement st = (Statement) con.createStatement();
                    st.executeUpdate(query);
                } catch (SQLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                Object id =  jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                updateProperties(id);
            }

            private void updateProperties(Object id) {
                try {
                    Connection con = initDbCon();
                    String query = "SELECT * FROM `properties` WHERE user_id=" + id;
                    Statement st = (Statement) con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    String[] colNames = new String[]{
                        "ID","Name","Location", "Country"
                    };
                    DefaultTableModel tableModel = new DefaultTableModel(colNames,0);
                    while(rs.next())
                    {
                        tableModel.addRow(new Object[]{rs.getString(1),rs.getString(3),rs.getString(4),rs.getString(5)});
                    }
                    tableModel.addRow(new Object[]{""});
                    if(tableModel.getRowCount() == 0)
                    {
                        tableModel.setRowCount(1);
                        jTable2.setModel(tableModel);
                    }
                    else
                    {
                        jTable2.setModel(tableModel);
                    }
                    //add listener for the second table so we can have inline insert and edit
                    jTable2.getModel().addTableModelListener(new TableModelListener() {

                        @Override
                        public void tableChanged(TableModelEvent e) {
                            try {
                                if(e.getLastRow() == jTable2.getRowCount()-1 && e.getType() == e.UPDATE)
                                {   
                                    //insert row
                                    int col = jTable2.getSelectedColumn();
                                    String colName = jTable2.getColumnName(col);
                                    int selectedCol = e.getColumn();
                                    int selectedRow = e.getFirstRow();
                                    Object id = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                                    System.out.println("User_id "+id);
                                    Object val = jTable2.getValueAt(selectedRow, selectedCol);
                                    
                                    Connection con = initDbCon();
                                    String query = "INSERT INTO `properties` (`" + colName + "`,`user_id`) " +
                                                                "VALUES ('" + val + "','" + id + "');";
                                    Statement st = (Statement) con.createStatement();
                                    st.executeUpdate(query);
                                    DefaultTableModel dtm = (DefaultTableModel)jTable2.getModel();
                                    dtm.addRow(new Object[]{""});
                                }
                                else
                                {//edit
                                    int col = jTable2.getSelectedColumn();
                                    String colName = jTable2.getColumnName(col);
                                    int selectedCol = e.getColumn();
                                    int selectedRow = e.getFirstRow();
                                    Object id = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                                    System.out.println("User_id "+id);
                                    Object val = jTable2.getValueAt(selectedRow, selectedCol);
                                    Object t2id = jTable2.getValueAt(selectedRow, 0);
                                    Connection con = initDbCon();
                                    String query = "UPDATE `properties` SET `" + colName + "` = '"+ val + "',`user_id`= '" + id + "' "
                                            + "WHERE id = " + t2id;
                                    System.out.println(query);
                                    Statement st = (Statement) con.createStatement();
                                    st.executeUpdate(query);
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                } catch (SQLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
    }
}
